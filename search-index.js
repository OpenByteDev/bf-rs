var searchIndex = {};
searchIndex["bf"] = {"doc":"","items":[[0,"result","bf","",null,null],[4,"Error","bf::result","",null,null],[13,"UnmatchedBegin","","",0,null],[13,"UnmatchedEnd","","",0,null],[13,"PointerUnderflow","","",0,null],[13,"PointerOverflow","","",0,null],[6,"BfResult","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"op_code","bf","",null,null],[4,"OpCode","bf::op_code","",null,null],[13,"Left","","",1,null],[13,"Right","","",1,null],[13,"Up","","",1,null],[13,"Down","","",1,null],[13,"In","","",1,null],[13,"Out","","",1,null],[13,"Begin","","",1,null],[13,"End","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[0,"state","bf","",null,null],[3,"State","bf::state","The BF machine state.",null,null],[17,"DEFAULT_CAPACITY","","The default number of 8-bit memory cells, as used by `State::new`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Creates a new BF machine state with capacity [`DEFAULT_CAPACITY`].",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new BF machine state.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"left","","Decrements the pointer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bfresult"}}],[11,"right","","Increments the pointer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bfresult"}}],[11,"up","","Increments the byte at the pointer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"down","","Decrements the byte at the pointer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"load","","Gets the value of the point at the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"store","","Sets the value of the byte at the pointer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"up_pos_offset","","Adds the given value at the given positive offset from the pointer.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"name":"bfresult"}}],[11,"up_neg_offset","","Adds the given value at the given negative offset from the pointer.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"name":"bfresult"}}],[11,"read","","Reads from a `Read` into the byte at the pointer.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"write","","Writes to a `Write` from the byte at the pointer.",2,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"capacity","","The memory capacity.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_mut_ptr","","Gets a mutable, raw pointer to the start of memory.",2,null],[0,"traits","bf","",null,null],[8,"Interpretable","bf::traits","Program forms which can be interpreted.",null,null],[10,"interpret_state","","Interprets a program against the given state.",3,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret","","Interprets a program. If the given `size` is `None`, the default memory size.",3,{"inputs":[{"name":"self"},{"name":"option"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_stdin","","Interprets a program using stdin and stdout for input and output.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bfresult"}}],[11,"interpret_memory","","Interprets a program from memory, returning a vector of its output.",3,null],[0,"ast","bf","",null,null],[4,"Instruction","bf::ast","A BF instruction.",null,null],[13,"Op","","",4,null],[13,"Loop","","",4,null],[5,"parse_program","","",null,null],[5,"mk_left","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_right","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_up","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_down","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_in","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_out","","",null,{"inputs":[],"output":{"name":"instruction"}}],[5,"mk_loop","","Takes a vector of instructions and makes them into a loop.",null,{"inputs":[{"name":"vec"}],"output":{"name":"instruction"}}],[6,"Program","","A BF program is a sequence of instructions.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[0,"rle","bf","",null,null],[4,"Instruction","bf::rle","A BF instruction.",null,null],[13,"Op","","",5,null],[13,"Loop","","",5,null],[5,"compile","","",null,null],[5,"mk_left","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_right","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_up","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_down","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_in","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_out","","",null,{"inputs":[{"name":"count"}],"output":{"name":"instruction"}}],[5,"mk_loop","","Takes a vector of instructions and makes them into a loop.",null,{"inputs":[{"name":"vec"}],"output":{"name":"instruction"}}],[6,"Program","","A BF program is a sequence of instructions.",null,null],[6,"Count","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[0,"flat","bf","",null,null],[4,"Instruction","bf::flat","Instructions as output by the bytecode flattener.",null,null],[13,"Left","","Move the pointer left by the specified offset.",6,null],[13,"Right","","Move the pointer right by the specified offset.",6,null],[13,"Change","","Change the value at the pointer by the specified offset.",6,null],[13,"In","","Read input.",6,null],[13,"Out","","Write output.",6,null],[13,"JumpZero","","Begin a loop",6,null],[13,"JumpNotZero","","End a loop",6,null],[13,"SetZero","","Set the current byte to 0",6,null],[13,"OffsetAddRight","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",6,null],[13,"OffsetAddLeft","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",6,null],[13,"FindZeroRight","","Move the pointer to a zero, skipping the offset at a time.",6,null],[13,"FindZeroLeft","","Move the pointer to a zero, skipping the offset at a time.",6,null],[5,"compile","","",null,null],[6,"Program","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[0,"peephole","bf","",null,null],[3,"Compiler","bf::peephole","",null,null],[4,"Instruction","","Instructions as output by the peephole optimizer.",null,null],[13,"Left","","Move the pointer left by the specified offset.",7,null],[13,"Right","","Move the pointer right by the specified offset.",7,null],[13,"Change","","Change the value at the pointer by the specified offset.",7,null],[13,"In","","Read input.",7,null],[13,"Out","","Write output.",7,null],[13,"SetZero","","Set the current byte to 0",7,null],[13,"OffsetAddRight","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",7,null],[13,"OffsetAddLeft","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",7,null],[13,"FindZeroRight","","Move the pointer to a zero, skipping the offset at a time.",7,null],[13,"FindZeroLeft","","Move the pointer to a zero, skipping the offset at a time.",7,null],[13,"Loop","","A loop",7,null],[5,"set_zero_peephole","","",null,null],[5,"find_zero_peephole","","",null,null],[5,"offset_add_peephole","","",null,null],[5,"compile","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",8,null],[11,"into_program","","",8,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[6,"Program","","",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[0,"jit","bf","",null,null],[3,"Program","bf::jit","",null,null],[5,"compile","","",null,{"inputs":[{"name":"program"},{"name":"bool"}],"output":{"name":"program"}}],[5,"compile_sequence","","",null,null],[5,"compile_instruction","","",null,{"inputs":[{"name":"assembler"},{"name":"instruction"},{"name":"bool"}],"output":null}],[11,"interpret_state","","",9,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[0,"test_helpers","bf","",null,null],[5,"assert_interpret","bf::test_helpers","",null,null],[5,"assert_interpret_result","","",null,null],[17,"FACTOR_SRC","","",null,null],[17,"HELLO_WORLD_SRC","","",null,null],[11,"interpret_state","bf::ast","",10,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_state","bf::rle","",11,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_state","bf::flat","",12,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_state","bf::peephole","",13,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}]],"paths":[[4,"Error"],[4,"OpCode"],[3,"State"],[8,"Interpretable"],[4,"Instruction"],[4,"Instruction"],[4,"Instruction"],[4,"Instruction"],[3,"Compiler"],[3,"Program"],[6,"Program"],[6,"Program"],[6,"Program"],[6,"Program"]]};
searchIndex["bfi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
