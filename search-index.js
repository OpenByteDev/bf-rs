var searchIndex = {};
searchIndex["bf"] = {"doc":"","items":[[0,"common","bf","Definitions common to multiple passes.",null,null],[4,"Error","bf::common","The static and dynamic errors that can happen in Brainfuck.",null,null],[13,"UnmatchedBegin","","Unmatched ‘[’ (syntax error)",0,null],[13,"UnmatchedEnd","","Unmatched ‘]’ (syntax error)",0,null],[13,"PointerUnderflow","","If execution continues, the pointer will go below 0 (run-time error)",0,null],[13,"PointerOverflow","","If execution continues, the pointer will go beyond the high end of the memory (run-time error)",0,null],[4,"Command","","The eight Brainfuck commands.",null,null],[13,"Right","","`>`: Increment the data pointer.",1,null],[13,"Left","","`<`: Decrement the data pointer.",1,null],[13,"Up","","`+`: Increment the byte value at the data pointer.",1,null],[13,"Down","","`-`: Decrement the byte value at the data pointer.",1,null],[13,"In","","`,`: Read a byte from the standard input.",1,null],[13,"Out","","`.`: Write a byte to the standard output.",1,null],[13,"Begin","","`[`: Begin a loop, which executes if the byte at the pointer is non-zero.",1,null],[13,"End","","`]`: End a loop, which repeats if the byte at the pointer is non-zero.",1,null],[4,"Instruction","","Instructions as output by the bytecode flattener.",null,null],[13,"Left","","Decrease the pointer by the specified offset.",2,null],[13,"Right","","Increase the pointer by the specified offset.",2,null],[13,"Add","","Increase the current byte value by the specified offset.",2,null],[13,"In","","Read a byte of input.",2,null],[13,"Out","","Write a byte of output.",2,null],[13,"JumpZero","","Begin a loop, jumping to the end if the current byte value is 0.",2,null],[13,"JumpNotZero","","End a loop if the current byte value is 0; otherwise repeat the loop.",2,null],[13,"SetZero","","Set the current byte value to 0.",2,null],[13,"OffsetAddRight","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",2,null],[13,"OffsetAddLeft","","Add the byte at the pointer to the byte at the specified offset and zero the byte at the pointer.",2,null],[13,"FindZeroRight","","Finds the nearest zero to the left that appears offset by a multiple of the given `Count`.",2,null],[13,"FindZeroLeft","","Finds the nearest zero to the right that appears offset by a multiple of the given `Count`.",2,null],[6,"BfResult","","The result type for Brainfuck operations that can fail.",null,null],[6,"Count","","The number of times to repeat a command when run-length encoded.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[0,"state","bf","The Brainfuck machine state.",null,null],[3,"State","bf::state","The Brainfuck machine state.",null,null],[17,"DEFAULT_CAPACITY","","(`== 30_000`) The default number of 8-bit memory cells, as used by `State::new`.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Creates a new BF machine state with memory capacity `DEFAULT_CAPACITY` (30_000).",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new BF machine state with the given memory capacity.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"left","","Decrements/decreases the pointer.",3,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bfresult"}}],[11,"right","","Increments/increases the pointer.",3,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bfresult"}}],[11,"up","","Increments/increases the byte at the pointer.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"down","","Decrements/decreases the byte at the pointer.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"load","","Gets the value of the byte at the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"store","","Sets the value of the byte at the pointer.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"up_pos_offset","","Adds the given value at the given positive offset from the pointer.",3,{"inputs":[{"name":"self"},{"name":"c"},{"name":"u8"}],"output":{"name":"bfresult"}}],[11,"up_neg_offset","","Adds the given value at the given negative offset from the pointer.",3,{"inputs":[{"name":"self"},{"name":"c"},{"name":"u8"}],"output":{"name":"bfresult"}}],[11,"read","","Reads from a `Read` into the byte at the pointer.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"write","","Writes to a `Write` from the byte at the pointer.",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"capacity","","The memory capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_mut_ptr","","Gets a mutable, raw pointer to the start of memory.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[0,"traits","bf","Contains the Interpretable trait, which provides a common interface for running a Brainfuck program.",null,null],[8,"RleCompilable","bf::traits","Program forms that can be compiled to the RLE AST.",null,null],[10,"with_ast","","Convert the given program to unoptimized AST to prepare for run-length encoding.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"rle_compile","","Run-length encode the given program.",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[8,"PeepholeCompilable","","Program forms that can be compiled to the peephole AST.",null,null],[10,"with_rle","","Compile the given program into RLE AST to prepare for peephole optimization.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"peephole_compile","","Peephole optimize the given program.",5,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[8,"BytecodeCompilable","","Program forms that can be compiled to bytecode.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for bytecode compilation.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"bytecode_compile","","Compile the given program to bytecode.",6,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[8,"JitCompilable","","Program forms that can be JIT compiled.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for JIT compilation.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"jit_compile","","JIT compile the given program.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"program"}}],[8,"LlvmCompilable","","Program forms that can be compiled and run via LLVM.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for LLVM compilation.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"llvm_run","","JIT compile and run the given program via LLVM.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bfresult"}}],[8,"Interpretable","","Program forms that can be interpreted.",null,null],[10,"interpret_state","","Interprets a program against the given state.",9,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret","","Interprets a program. If the given `size` is `None`, the default memory size.",9,{"inputs":[{"name":"self"},{"name":"option"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_stdin","","Interprets a program using stdin and stdout for input and output.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bfresult"}}],[11,"interpret_memory","","Interprets a program from memory, returning a vector of its output.",9,null],[8,"IntoUsize","","For converting smaller numeric types into `usize`.",null,null],[10,"into_usize","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"rts","bf","Minimal run-time system, which does I/O.",null,null],[3,"RtsState","bf::rts","Minimal state for our minimal run-time system.",null,null],[17,"OKAY","","The object code terminated successfully.",null,null],[17,"UNDERFLOW","","The pointer would have pointed below the allocated buffer had the program continued.",null,null],[17,"OVERFLOW","","The pointer would have pointed above the allocated buffer had the program continued.",null,null],[11,"new","","",11,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"self"}}],[11,"read","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"write","","",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[0,"ast","bf","Parsing and interpretation for unoptimized Brainfuck abstract syntax trees.",null,null],[4,"Statement","bf::ast","An unoptimized BF statement.",null,null],[13,"Cmd","","A non-loop command.",12,null],[13,"Loop","","A loop surrounding a sequence of instructions.",12,null],[5,"parse_program","","Parses Brainfuck concrete syntax into an abstract syntax tree.",null,null],[6,"Program","","A BF program is represented as a slice of statements. The slice will typically be boxed.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[0,"rle","bf","Run-length encodes Brainfuck commands.",null,null],[4,"Statement","bf::rle","A run-length encoded BF instruction.",null,null],[13,"Cmd","","Repeats the given command the given number of times.",13,null],[13,"Loop","","A loop surrounding a sequence of instructions.",13,null],[5,"compile","","Compiles an unoptimized `ast` program to a run-length encoded program.",null,{"inputs":[{"name":"program"}],"output":{"name":"box"}}],[11,"rle_compile","bf::traits","Run-length encode the given program.",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"with_ast","bf::rle::compiler","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[6,"Program","bf::rle","A run-length encoded BF program is a rose tree of run-length encoded statements.",null,null],[8,"RleCompilable","","Program forms that can be compiled to the RLE AST.",null,null],[10,"with_ast","","Convert the given program to unoptimized AST to prepare for run-length encoding.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"rle_compile","bf::traits","Run-length encode the given program.",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","bf::rle","",13,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[0,"bytecode","bf","Brainfuck bytecode instead of an abstract syntax tree.",null,null],[5,"compile","bf::bytecode","Compiles peephole-optimized AST to a bytecode program.",null,null],[11,"bytecode_compile","bf::traits","Compile the given program to bytecode.",6,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[6,"Program","bf::bytecode","A program is a bytecode sequence of instructions.",null,null],[8,"BytecodeCompilable","","Program forms that can be compiled to bytecode.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for bytecode compilation.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"bytecode_compile","bf::traits","Compile the given program to bytecode.",6,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"peephole","bf","The peephole optimizer, which replaces common loop forms with single (non-Brainfuck) instructions.",null,null],[4,"Statement","bf::peephole","Instructions as output by the peephole optimizer.",null,null],[13,"Instr","","A bytecode instruction, which does not contain any loops.",15,null],[13,"Loop","","A loop.",15,null],[5,"compile","","Peephole-optimizes run-length encoded AST.",null,null],[11,"peephole_compile","bf::traits","Peephole optimize the given program.",5,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"with_rle","bf::peephole::compiler","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[6,"Program","bf::peephole","At this level, a program is a rose tree of statements.",null,null],[8,"PeepholeCompilable","","Program forms that can be compiled to the peephole AST.",null,null],[10,"with_rle","","Compile the given program into RLE AST to prepare for peephole optimization.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"peephole_compile","bf::traits","Peephole optimize the given program.",5,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","bf::peephole","",15,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[0,"jit","bf","Just-in-time compiles Brainfuck AST to x64 machine code (`--features jit`, nightly only)",null,null],[3,"Program","bf::jit","The representation of a JIT-compiled program.",null,null],[5,"compile","","Compiles peephole-optimized AST to x64 machine code.",null,{"inputs":[{"name":"program"},{"name":"bool"}],"output":{"name":"program"}}],[11,"jit_compile","bf::traits","JIT compile the given program.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"program"}}],[11,"with_peephole","bf::jit::compiler","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[8,"JitCompilable","bf::jit","Program forms that can be JIT compiled.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for JIT compilation.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"jit_compile","bf::traits","JIT compile the given program.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"program"}}],[11,"interpret_state","bf::jit","",18,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[0,"llvm","bf","JIT compiler for Brainfuck based on LLVM.",null,null],[5,"compile_and_run","bf::llvm","JIT compile and run the given program via LLVM.",null,{"inputs":[{"name":"program"},{"name":"option"},{"name":"bool"}],"output":{"name":"bfresult"}}],[11,"llvm_run","bf::traits","JIT compile and run the given program via LLVM.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bfresult"}}],[11,"with_peephole","bf::llvm::compiler","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[8,"LlvmCompilable","bf::llvm","Program forms that can be compiled and run via LLVM.",null,null],[10,"with_peephole","","Compile the given program into the peephole AST to prepare for LLVM compilation.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"llvm_run","bf::traits","JIT compile and run the given program via LLVM.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bfresult"}}],[0,"test_helpers","bf","Helper definitions for testing both inside and outside (e.g., benches) the crate.",null,null],[5,"assert_interpret","bf::test_helpers","Interprets `program`, giving it input `input`, and asserting that its output is `output`.",null,null],[5,"assert_interpret_result","","Interprets `program`, giving it input `input`, and asserting that its result is `output`.",null,null],[17,"FACTOR_SRC","","Source of the factoring program from `../bf/factor.bf`.",null,null],[17,"HELLO_WORLD_SRC","","Source of a “hello world” program.",null,null],[11,"interpret_state","bf::ast","",14,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_state","bf::rle","",16,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"with_peephole","bf::peephole","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"interpret_state","bf::bytecode","",19,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}],[11,"interpret_state","bf::peephole","",17,{"inputs":[{"name":"self"},{"name":"state"},{"name":"r"},{"name":"w"}],"output":{"name":"bfresult"}}]],"paths":[[4,"Error"],[4,"Command"],[4,"Instruction"],[3,"State"],[8,"RleCompilable"],[8,"PeepholeCompilable"],[8,"BytecodeCompilable"],[8,"JitCompilable"],[8,"LlvmCompilable"],[8,"Interpretable"],[8,"IntoUsize"],[3,"RtsState"],[4,"Statement"],[4,"Statement"],[6,"Program"],[4,"Statement"],[6,"Program"],[6,"Program"],[3,"Program"],[6,"Program"]]};
searchIndex["bfi"] = {"doc":"The Brainfuck interpreter executable.","items":[],"paths":[]};
initSearch(searchIndex);
